'From Pharo3.0 of 18 March 2013 [Latest update: #30826] on 22 April 2014 at 11:05:39.08577 am'!Object subclass: #ConfigurationOfMapless	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfMapless'!!ConfigurationOfMapless commentStamp: '<historical>' prior: 0!!!ConfigurationOfMapless methodsFor: 'symbolic versions' stamp: 'sebastiansastre 4/4/2014 21:40'!beta: spec	<symbolicVersion: #'beta'>	spec for: #'pharo3.x' version: '1.0'! !!ConfigurationOfMapless methodsFor: 'symbolic versions' stamp: 'sebastiansastre 4/4/2014 21:40'!dev: spec	<symbolicVersion: #'dev'>	spec for: #'pharo3.x' version: '0.9'! !!ConfigurationOfMapless methodsFor: 'baselines' stamp: 'sebastiansastre 4/4/2014 22:46'!baseline10: spec    <version: '1.0-baseline'>    	spec for: #'pharo3.x' do: [		self class ensureGitFileTree.		spec blessing: #baseline.		spec			repository: 'http://smalltalkhub.com/mc/PharoExtras/JSON/main';			package: 'JSON'.		spec			repository: 'http://squeaksource.com/OrderPreservingDict';			package: 'Collections-OrderPreservingDictionary'.		spec			repository: 'http://smalltalkhub.com/mc/sebastianconcept/SASExtensions/main';			package: 'JSONExtensions'.		spec project: 'MongoTalk' with: [ 			spec				className: 'ConfigurationOfMongoTalk';				file: 'ConfigurationOfMongoTalk';				versionString: #bleedingEdge;				repository: 'http://smalltalkhub.com/mc/francois/MongoTalk/main'.				].		spec project: 'Xtreams' with: [ spec				className: 'ConfigurationOfXtreams';				file: 'ConfigurationOfXtreams';				repository: 'http://www.squeaksource.com/Xtreams'.				].		spec			repository: 'http://smalltalkhub.com/mc/mlhales/RedisClient/main';			package: 'Redis-Client'.		spec			repository: 'http://smalltalkhub.com/mc/mlhales/RedisClient/main';			package: 'Redis-Queue'.		]! !!ConfigurationOfMapless methodsFor: 'versions' stamp: 'sebastiansastre 4/4/2014 21:40'!version09: spec	<version: '0.9' imports: #('1.0-baseline')>		spec		for: #'pharo3.x'		do: [ 			spec				blessing: #dev;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Mapless.git?protocol=git&dir=src&branch=dev';				description: 'Mapless is a small framework for storing objects in a key->data fashion (i.e.: noSQL databases) without requiring any kind of object-data map. So far only MongoDB and Redis are supported.'.			spec package: 'Mapless'.			 ].! !!ConfigurationOfMapless methodsFor: 'versions' stamp: 'sebastiansastre 4/22/2014 11:05'!version10: spec	<version: '1.0' imports: #('1.0-baseline')>		spec		for: #'pharo3.x'		do: [ 			spec				blessing: #beta;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Mapless.git?protocol=https&dir=src&branch=master';				description: 'Mapless is a small framework for storing objects in a key->data fashion (i.e.: noSQL databases) without requiring any kind of object-data map. So far only MongoDB and Redis are supported.'.			spec package: 'Mapless'.			 ].! !!ConfigurationOfMapless methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfMapless methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!project	^ project		ifNil: [ 			| constructor |				"Bootstrap Metacello if it is not already loaded"			(self class baseConfigurationClassIfAbsent: [  ]) ensureMetacello.				"Construct Metacello project"			project := MetacelloMCProject new projectAttributes: self customProjectAttributes.			constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self project: project.			project loadType: #linear.	"change to #atomic if desired"			project ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConfigurationOfMapless class	instanceVariableNames: ''!!ConfigurationOfMapless class commentStamp: '<historical>' prior: 0!!!ConfigurationOfMapless class methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!project	^self new project! !!ConfigurationOfMapless class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 3/4/2014 10:47'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMapless class methodsFor: 'gitfiletree support' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureGitFileTree	"And all related dependencies."	Smalltalk		at: #MCFileTreeGitRepository		ifAbsent: [ 			Gofer new				url: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo30/main';				configurationOf: 'GitFileTree';				loadDevelopment ]! !!ConfigurationOfMapless class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 11:56'!catalogKeywords	^ #(#Database #Persistence)! !!ConfigurationOfMapless class methodsFor: 'catalog' stamp: 'sebastiansastre 3/5/2014 19:15'!catalogDescription	^ 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'! !!ConfigurationOfMapless class methodsFor: 'catalog' stamp: 'sebastiansastre 3/5/2014 19:15'!catalogKeyClassesAndExample	^ 'Aggregate'! !!ConfigurationOfMapless class methodsFor: 'catalog' stamp: 'sebastiansastre 3/5/2014 19:14'!catalogChangeLog	^ 'Date: March 5, 2014First Aggregate configuration using github'! !!ConfigurationOfMapless class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:54'!catalogContactInfo	^ 'https://github.com/sebastianconcept'! !!ConfigurationOfMapless class methodsFor: 'loading' stamp: 'sebastiansastre 4/4/2014 21:39'!loadDev	<apiDocumentation>	^(self project version: #dev) load! !!ConfigurationOfMapless class methodsFor: 'loading' stamp: 'sebastiansastre 4/4/2014 21:37'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #beta) load! !!ConfigurationOfMapless class methodsFor: 'development support' stamp: 'sebastiansastre 3/4/2014 10:47'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfMapless class methodsFor: 'development support' stamp: 'sebastiansastre 3/4/2014 10:47'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfMapless class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfMapless class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfMapless class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !